import sys

pattern = """
###############################
#.............................#
#.............................#
#.............................#
#.............................#
#..............#..............#
#.............###.............#
#............#####............#
#...........#######...........#
#..........#########..........#
#............#####............#
#...........#######...........#
#..........#########..........#
#.........###########.........#
#........#############........#
#..........#########..........#
#.........###########.........#
#........#############........#
#.......###############.......#
#......#################......#
#........#############........#
#.......###############.......#
#......#################......#
#.....###################.....#
#....#####################....#
#.............###.............#
#.............###.............#
#.............###.............#
#.............................#
#.............................#
#.............................#
#.............................#
###############################
""".strip().split("\n")

def detect_tree(robots):
	canvas = [["."] * 101 for _ in range(103)]
	for (x, y), _ in robots:
		canvas[y][x] = "#"

	def check_pattern_at(pos):
		for y in range(len(pattern)):
			for x in range(len(pattern[0])):
				if canvas[pos[1] + y][pos[0] + x] != pattern[y][x]:
					return False
		return True

	for y in range(len(canvas) - len(pattern) + 1):
		for x in range(len(canvas[0]) - len(pattern[0]) + 1):
			if check_pattern_at((x, y)):
				return True
	
	return False

def main():
	robots = [tuple(map(lambda x: tuple(map(int, x.split("=")[1].split(","))), line.strip().split(" "))) for line in sys.stdin]

	result = 0
	while not detect_tree(robots):
		for i, (p, v) in enumerate(robots):
			robots[i] = (((p[0] + v[0]) % 101, (p[1] + v[1]) % 103), v)

		result += 1

	print(result)

if __name__ == "__main__":
	main()